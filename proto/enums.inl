// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// Version: 1.3.0.0

namespace enums {

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumByte value)
{
    if (value == EnumByte::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumByte::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumByte::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumByte::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumByte::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumByte::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumChar value)
{
    if (value == EnumChar::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumChar::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumChar::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumChar::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumChar::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumChar::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumWChar value)
{
    if (value == EnumWChar::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumWChar::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumWChar::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumWChar::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumWChar::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumWChar::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumInt8 value)
{
    if (value == EnumInt8::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumInt8::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumInt8::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumInt8::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumInt8::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumInt8::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumUInt8 value)
{
    if (value == EnumUInt8::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumUInt8::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumUInt8::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumUInt8::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumUInt8::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumUInt8::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumInt16 value)
{
    if (value == EnumInt16::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumInt16::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumInt16::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumInt16::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumInt16::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumInt16::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumUInt16 value)
{
    if (value == EnumUInt16::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumUInt16::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumUInt16::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumUInt16::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumUInt16::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumUInt16::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumInt32 value)
{
    if (value == EnumInt32::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumInt32::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumInt32::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumInt32::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumInt32::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumInt32::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumUInt32 value)
{
    if (value == EnumUInt32::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumUInt32::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumUInt32::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumUInt32::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumUInt32::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumUInt32::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumInt64 value)
{
    if (value == EnumInt64::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumInt64::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumInt64::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumInt64::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumInt64::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumInt64::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, EnumUInt64 value)
{
    if (value == EnumUInt64::ENUM_VALUE_0) { stream << "ENUM_VALUE_0"; return stream; }
    if (value == EnumUInt64::ENUM_VALUE_1) { stream << "ENUM_VALUE_1"; return stream; }
    if (value == EnumUInt64::ENUM_VALUE_2) { stream << "ENUM_VALUE_2"; return stream; }
    if (value == EnumUInt64::ENUM_VALUE_3) { stream << "ENUM_VALUE_3"; return stream; }
    if (value == EnumUInt64::ENUM_VALUE_4) { stream << "ENUM_VALUE_4"; return stream; }
    if (value == EnumUInt64::ENUM_VALUE_5) { stream << "ENUM_VALUE_5"; return stream; }
    stream << "<unknown>";
    return stream;
}

template <class TOutputStream>
inline TOutputStream& operator<<(TOutputStream& stream, const Enums& value)
{
    stream << "Enums(";
    stream << "byte0="; stream << value.byte0;
    stream << ",byte1="; stream << value.byte1;
    stream << ",byte2="; stream << value.byte2;
    stream << ",byte3="; stream << value.byte3;
    stream << ",byte4="; stream << value.byte4;
    stream << ",byte5="; stream << value.byte5;
    stream << ",char0="; stream << value.char0;
    stream << ",char1="; stream << value.char1;
    stream << ",char2="; stream << value.char2;
    stream << ",char3="; stream << value.char3;
    stream << ",char4="; stream << value.char4;
    stream << ",char5="; stream << value.char5;
    stream << ",wchar0="; stream << value.wchar0;
    stream << ",wchar1="; stream << value.wchar1;
    stream << ",wchar2="; stream << value.wchar2;
    stream << ",wchar3="; stream << value.wchar3;
    stream << ",wchar4="; stream << value.wchar4;
    stream << ",wchar5="; stream << value.wchar5;
    stream << ",int8b0="; stream << value.int8b0;
    stream << ",int8b1="; stream << value.int8b1;
    stream << ",int8b2="; stream << value.int8b2;
    stream << ",int8b3="; stream << value.int8b3;
    stream << ",int8b4="; stream << value.int8b4;
    stream << ",int8b5="; stream << value.int8b5;
    stream << ",uint8b0="; stream << value.uint8b0;
    stream << ",uint8b1="; stream << value.uint8b1;
    stream << ",uint8b2="; stream << value.uint8b2;
    stream << ",uint8b3="; stream << value.uint8b3;
    stream << ",uint8b4="; stream << value.uint8b4;
    stream << ",uint8b5="; stream << value.uint8b5;
    stream << ",int16b0="; stream << value.int16b0;
    stream << ",int16b1="; stream << value.int16b1;
    stream << ",int16b2="; stream << value.int16b2;
    stream << ",int16b3="; stream << value.int16b3;
    stream << ",int16b4="; stream << value.int16b4;
    stream << ",int16b5="; stream << value.int16b5;
    stream << ",uint16b0="; stream << value.uint16b0;
    stream << ",uint16b1="; stream << value.uint16b1;
    stream << ",uint16b2="; stream << value.uint16b2;
    stream << ",uint16b3="; stream << value.uint16b3;
    stream << ",uint16b4="; stream << value.uint16b4;
    stream << ",uint16b5="; stream << value.uint16b5;
    stream << ",int32b0="; stream << value.int32b0;
    stream << ",int32b1="; stream << value.int32b1;
    stream << ",int32b2="; stream << value.int32b2;
    stream << ",int32b3="; stream << value.int32b3;
    stream << ",int32b4="; stream << value.int32b4;
    stream << ",int32b5="; stream << value.int32b5;
    stream << ",uint32b0="; stream << value.uint32b0;
    stream << ",uint32b1="; stream << value.uint32b1;
    stream << ",uint32b2="; stream << value.uint32b2;
    stream << ",uint32b3="; stream << value.uint32b3;
    stream << ",uint32b4="; stream << value.uint32b4;
    stream << ",uint32b5="; stream << value.uint32b5;
    stream << ",int64b0="; stream << value.int64b0;
    stream << ",int64b1="; stream << value.int64b1;
    stream << ",int64b2="; stream << value.int64b2;
    stream << ",int64b3="; stream << value.int64b3;
    stream << ",int64b4="; stream << value.int64b4;
    stream << ",int64b5="; stream << value.int64b5;
    stream << ",uint64b0="; stream << value.uint64b0;
    stream << ",uint64b1="; stream << value.uint64b1;
    stream << ",uint64b2="; stream << value.uint64b2;
    stream << ",uint64b3="; stream << value.uint64b3;
    stream << ",uint64b4="; stream << value.uint64b4;
    stream << ",uint64b5="; stream << value.uint64b5;
    stream << ")";
    return stream;
}

} // namespace enums
